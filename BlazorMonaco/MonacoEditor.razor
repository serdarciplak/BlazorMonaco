@implements IDisposable
@using BlazorMonaco.Bridge
@using Microsoft.JSInterop
@using System.Text.Json
@inject IJSRuntime jsRuntime

<div id="@Id" class="monaco-editor-container @CssClass"></div>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter] public Func<MonacoEditor, StandaloneEditorConstructionOptions> ConstructionOptions { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidInit { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidCompositionEnd { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidCompositionStart { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnContextMenu { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidBlurEditorText { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidBlurEditorWidget { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidChangeConfiguration { get; set; }
    [Parameter] public EventCallback<CursorPositionChangedEvent> OnDidChangeCursorPosition { get; set; }
    [Parameter] public EventCallback<CursorSelectionChangedEvent> OnDidChangeCursorSelection { get; set; }
    //OnDidChangeModel
    //OnDidChangeModelContent
    //OnDidChangeModelDecorations
    //OnDidChangeModelLanguage
    //OnDidChangeModelLanguageConfiguration
    //OnDidChangeModelOptions
    [Parameter] public EventCallback<ContentSizeChangedEvent> OnDidContentSizeChange { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidDispose { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidFocusEditorText { get; set; }
    [Parameter] public EventCallback<MonacoEditor> OnDidFocusEditorWidget { get; set; }
    [Parameter] public EventCallback<EditorLayoutInfo> OnDidLayoutChange { get; set; }
    [Parameter] public EventCallback<PasteEvent> OnDidPaste { get; set; }
    [Parameter] public EventCallback<ScrollEvent> OnDidScrollChange { get; set; }
    [Parameter] public EventCallback<KeyboardEvent> OnKeyDown { get; set; }
    [Parameter] public EventCallback<KeyboardEvent> OnKeyUp { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseDown { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseLeave { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseMove { get; set; }
    [Parameter] public EventCallback<EditorMouseEvent> OnMouseUp { get; set; }

    private static IJSRuntime staticJsRuntime { get; set; }
    private DotNetObjectReference<MonacoEditor> jsObjectRef { get; set; }
    private Dictionary<string, Action<MonacoEditor, int[]>> actions { get; set; } = new Dictionary<string, Action<MonacoEditor, int[]>>();
    private Dictionary<string, Action<MonacoEditor, int>> commands { get; set; } = new Dictionary<string, Action<MonacoEditor, int>>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        staticJsRuntime = jsRuntime;
        jsObjectRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        jsObjectRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrWhiteSpace(Id))
        {
            Id = "blazor-monaco-" + Guid.NewGuid().ToString();
        }

        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Create the editor
            StandaloneEditorConstructionOptions options = ConstructionOptions?.Invoke(this);
            await MonacoEditor.Create(Id, Value, options);

            // Set editor event listeners
            if (OnDidCompositionEnd.HasDelegate)
                await SetEventListener("OnDidCompositionEnd");
            if (OnDidCompositionStart.HasDelegate)
                await SetEventListener("OnDidCompositionStart");
            if (OnContextMenu.HasDelegate)
                await SetEventListener("OnContextMenu");
            if (OnDidBlurEditorText.HasDelegate)
                await SetEventListener("OnDidBlurEditorText");
            if (OnDidBlurEditorWidget.HasDelegate)
                await SetEventListener("OnDidBlurEditorWidget");
            if (OnDidChangeConfiguration.HasDelegate)
                await SetEventListener("OnDidChangeConfiguration");
            if (OnDidChangeCursorPosition.HasDelegate)
                await SetEventListener("OnDidChangeCursorPosition");
            if (OnDidChangeCursorSelection.HasDelegate)
                await SetEventListener("OnDidChangeCursorSelection");
            if (OnDidContentSizeChange.HasDelegate)
                await SetEventListener("OnDidContentSizeChange");
            if (OnDidDispose.HasDelegate)
                await SetEventListener("OnDidDispose");
            if (OnDidFocusEditorText.HasDelegate)
                await SetEventListener("OnDidFocusEditorText");
            if (OnDidFocusEditorWidget.HasDelegate)
                await SetEventListener("OnDidFocusEditorWidget");
            if (OnDidLayoutChange.HasDelegate)
                await SetEventListener("OnDidLayoutChange");
            if (OnDidPaste.HasDelegate)
                await SetEventListener("OnDidPaste");
            if (OnDidScrollChange.HasDelegate)
                await SetEventListener("OnDidScrollChange");
            if (OnKeyDown.HasDelegate)
                await SetEventListener("OnKeyDown");
            if (OnKeyUp.HasDelegate)
                await SetEventListener("OnKeyUp");
            if (OnMouseDown.HasDelegate)
                await SetEventListener("OnMouseDown");
            if (OnMouseLeave.HasDelegate)
                await SetEventListener("OnMouseLeave");
            if (OnMouseMove.HasDelegate)
                await SetEventListener("OnMouseMove");
            if (OnMouseUp.HasDelegate)
                await SetEventListener("OnMouseUp");

            await OnDidInit.InvokeAsync(this);
        }
    }

    [JSInvokable]
    public async Task EventCallback(string eventName, string eventJson)
    {
        var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };

        switch (eventName)
        {
            case "OnDidCompositionEnd": await OnDidCompositionEnd.InvokeAsync(this); break;
            case "OnDidCompositionStart": await OnDidCompositionStart.InvokeAsync(this); break;
            case "OnContextMenu": if (eventJson != null) await OnContextMenu.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnDidBlurEditorText": await OnDidBlurEditorText.InvokeAsync(this); break;
            case "OnDidBlurEditorWidget": await OnDidBlurEditorWidget.InvokeAsync(this); break;
            case "OnDidChangeConfiguration": await OnDidChangeConfiguration.InvokeAsync(this); break;
            case "OnDidChangeCursorPosition": await OnDidChangeCursorPosition.InvokeAsync(JsonSerializer.Deserialize<CursorPositionChangedEvent>(eventJson, jsonOptions)); break;
            case "OnDidChangeCursorSelection": await OnDidChangeCursorSelection.InvokeAsync(JsonSerializer.Deserialize<CursorSelectionChangedEvent>(eventJson, jsonOptions)); break;
            case "OnDidContentSizeChange": await OnDidContentSizeChange.InvokeAsync(JsonSerializer.Deserialize<ContentSizeChangedEvent>(eventJson, jsonOptions)); break;
            case "OnDidDispose": await OnDidDispose.InvokeAsync(this); break;
            case "OnDidFocusEditorText": await OnDidFocusEditorText.InvokeAsync(this); break;
            case "OnDidFocusEditorWidget": await OnDidFocusEditorWidget.InvokeAsync(this); break;
            case "OnDidLayoutChange": if (eventJson != null) await OnDidLayoutChange.InvokeAsync(JsonSerializer.Deserialize<EditorLayoutInfo>(eventJson, jsonOptions)); break;
            case "OnDidPaste": if (eventJson != null) await OnDidPaste.InvokeAsync(JsonSerializer.Deserialize<PasteEvent>(eventJson, jsonOptions)); break;
            case "OnDidScrollChange": if (eventJson != null) await OnDidScrollChange.InvokeAsync(JsonSerializer.Deserialize<ScrollEvent>(eventJson, jsonOptions)); break;
            case "OnKeyDown": if (eventJson != null) await OnKeyDown.InvokeAsync(JsonSerializer.Deserialize<KeyboardEvent>(eventJson, jsonOptions)); break;
            case "OnKeyUp": if (eventJson != null) await OnKeyUp.InvokeAsync(JsonSerializer.Deserialize<KeyboardEvent>(eventJson, jsonOptions)); break;
            case "OnMouseDown": if (eventJson != null) await OnMouseDown.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnMouseLeave": if (eventJson != null) await OnMouseLeave.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnMouseMove": if (eventJson != null) await OnMouseMove.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
            case "OnMouseUp": if (eventJson != null) await OnMouseUp.InvokeAsync(JsonSerializer.Deserialize<EditorMouseEvent>(eventJson, jsonOptions)); break;
        }
    }

    [JSInvokable]
    public void ActionCallback(string keyCodesStr)
    {
        var keyCodes = keyCodesStr.Split(';').Select(k => Int32.Parse(k)).ToArray();
        var action = actions[keyCodesStr];
        action?.Invoke(this, keyCodes);
    }

    [JSInvokable]
    public void CommandCallback(int keyCode)
    {
        var action = commands[keyCode.ToString()];
        action?.Invoke(this, keyCode);
    }

    #region Static Methods

    public static async Task<string> Colorize(string text, string languageId, ColorizerOptions options)
    {
        return await staticJsRuntime.InvokeAsync<string>("blazorMonaco.editor.colorize", text, languageId, options);
    }

    public static async Task ColorizeElement(string elementId, ColorizerElementOptions options)
    {
        await staticJsRuntime.InvokeVoidAsync("blazorMonaco.editor.colorizeElement", elementId, options);
    }

    public static async Task<string> ColorizeModelLine(TextModel model, int lineNumber, int? tabSize = null)
    {
        return await staticJsRuntime.InvokeAsync<string>("blazorMonaco.editor.colorizeModelLine", model.Uri, lineNumber, tabSize);
    }

    private static async Task Create(string id, string value, StandaloneEditorConstructionOptions options)
    {
        if (options == null)
        {
            options = new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                Value = value
            };
        }

        // Convert the options object into a dictionary to get rid of the properties with null values
        var optionsJson = JsonSerializer.Serialize(options, new JsonSerializerOptions
        {
            IgnoreNullValues = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
        var optionsDict = JsonSerializer.Deserialize<JsonElement>(optionsJson);

        // Create the editor
        await staticJsRuntime.InvokeVoidAsync("blazorMonaco.editor.create", id, optionsDict);
    }

    // createDiffEditor

    // createDiffNavigator

    public static async Task<TextModel> CreateModel(string value, string language = null, string uri = null)
    {
        return await staticJsRuntime.InvokeAsync<TextModel>("blazorMonaco.editor.createModel", value, language, uri);
    }

    // createWebWorker

    // defineTheme

    public static async Task<TextModel> GetModel(string uri)
    {
        return await staticJsRuntime.InvokeAsync<TextModel>("blazorMonaco.editor.getModel", uri);
    }

    // getModelMarkers

    public static async Task<List<TextModel>> GetModels()
    {
        return await staticJsRuntime.InvokeAsync<List<TextModel>>("blazorMonaco.editor.getModels");
    }

    public static async Task RemeasureFonts()
    {
        await staticJsRuntime.InvokeVoidAsync("blazorMonaco.editor.remeasureFonts");
    }

    public static async Task SetModelLanguage(TextModel model, string languageId)
    {
        await staticJsRuntime.InvokeVoidAsync("blazorMonaco.editor.setModelLanguage", model.Uri, languageId);
    }

    // setModelMarkers

    public static async Task SetTheme(string newTheme)
    {
        await staticJsRuntime.InvokeVoidAsync("blazorMonaco.editor.setTheme", newTheme);
    }

    // tokenize

    #endregion

    #region Instance Methods

    public async Task AddAction(string actionId, string label, int[] keyCodes, string precondition, string keybindingContext, string contextMenuGroupId, double contextMenuOrder, Action<MonacoEditor, int[]> action)
    {
        actions[string.Join(";", keyCodes)] = action;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.addAction", Id, actionId, label, keyCodes, precondition, keybindingContext, contextMenuGroupId, contextMenuOrder, jsObjectRef);
    }

    public async Task AddCommand(int keyCode, Action<MonacoEditor, int> action)
    {
        commands[keyCode.ToString()] = action;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.addCommand", Id, keyCode, jsObjectRef);
    }

    // addContentWidget

    // addOverlayWidget

    // applyFontInfo

    // changeViewZones

    // createContextKey

    // deltaDecorations

    public async Task DisposeEditor()
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.dispose", Id);
    }

    // executeCommand

    // executeCommands

    // executeEdits

    public async Task Focus()
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.focus", Id);
    }

    // getAction

    public async Task<string> GetContainerDomNodeId()
    {
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getContainerDomNodeId", Id);
    }

    public async Task<double> GetContentHeight()
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getContentHeight", Id);
    }

    public async Task<double> GetContentWidth()
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getContentWidth", Id);
    }

    // getContribution

    //---- getDomNode

    public async Task<string> GetEditorType()
    {
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getEditorType", Id);
    }

    //---- getId

    public async Task<EditorLayoutInfo> GetLayoutInfo()
    {
        return await jsRuntime.InvokeAsync<EditorLayoutInfo>("blazorMonaco.editor.getLayoutInfo", Id);
    }

    // getLineDecorations

    public async Task<TextModel> GetModel()
    {
        return await jsRuntime.InvokeAsync<TextModel>("blazorMonaco.editor.getInstanceModel", Id);
    }

    public async Task<int> GetOffsetForColumn(int lineNumber, int column)
    {
        return await jsRuntime.InvokeAsync<int>("blazorMonaco.editor.getOffsetForColumn", Id, lineNumber, column);
    }

    public async Task<string> GetOption(EditorOption option)
    {
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getOption", Id, (int)option);
    }

    public async Task<List<string>> GetOptions()
    {
        return await jsRuntime.InvokeAsync<List<string>>("blazorMonaco.editor.getOptions", Id);
    }

    public async Task<Position> GetPosition()
    {
        return await jsRuntime.InvokeAsync<Position>("blazorMonaco.editor.getPosition", Id);
    }

    public async Task<EditorOptions> GetRawOptions()
    {
        return await jsRuntime.InvokeAsync<EditorOptions>("blazorMonaco.editor.getRawOptions", Id);
    }

    public async Task<double> GetScrollHeight()
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollHeight", Id);
    }

    public async Task<double> GetScrollLeft()
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollLeft", Id);
    }

    public async Task<double> GetScrollTop()
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollTop", Id);
    }

    public async Task<double> GetScrollWidth()
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getScrollWidth", Id);
    }

    public async Task<Position> GetScrolledVisiblePosition(Position position)
    {
        return await jsRuntime.InvokeAsync<Position>("blazorMonaco.editor.getScrolledVisiblePosition", Id, position);
    }

    public async Task<Selection> GetSelection()
    {
        return await jsRuntime.InvokeAsync<Selection>("blazorMonaco.editor.getSelection", Id);
    }

    public async Task<List<Selection>> GetSelections()
    {
        return await jsRuntime.InvokeAsync<List<Selection>>("blazorMonaco.editor.getSelections", Id);
    }

    // getSupportedActions

    public async Task<MouseTarget> GetTargetAtClientPoint(int clientX, int clientY)
    {
        return await jsRuntime.InvokeAsync<MouseTarget>("blazorMonaco.editor.getTargetAtClientPoint", Id, clientX, clientY);
    }

    public async Task<double> GetTopForLineNumber(int lineNumber)
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getTopForLineNumber", Id, lineNumber);
    }

    public async Task<double> GetTopForPosition(int lineNumber, int column)
    {
        return await jsRuntime.InvokeAsync<double>("blazorMonaco.editor.getTopForPosition", Id, lineNumber, column);
    }

    public async Task<string> GetValue()
    {
        return await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.getValue", Id);
    }

    public async Task<int> GetVisibleColumnFromPosition(Position position)
    {
        return await jsRuntime.InvokeAsync<int>("blazorMonaco.editor.getVisibleColumnFromPosition", Id, position);
    }

    public async Task<List<Range>> GetVisibleRanges()
    {
        return await jsRuntime.InvokeAsync<List<Range>>("blazorMonaco.editor.getVisibleRanges", Id);
    }

    public async Task<bool> HasTextFocus()
    {
        return await jsRuntime.InvokeAsync<bool>("blazorMonaco.editor.hasTextFocus", Id);
    }

    public async Task<bool> HasWidgetFocus()
    {
        return await jsRuntime.InvokeAsync<bool>("blazorMonaco.editor.hasWidgetFocus", Id);
    }

    public async Task Layout(Dimension dimension = null)
    {
        await jsRuntime.InvokeAsync<string>("blazorMonaco.editor.layout", Id, dimension);
    }

    // layoutContentWidget

    // layoutOverlayWidget

    public async Task<bool> PushUndoStop()
    {
        return await jsRuntime.InvokeAsync<bool>("blazorMonaco.editor.pushUndoStop", Id);
    }

    // removeContentWidget

    // removeOverlayWidget

    public async Task Render(bool? forceRedraw = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.render", Id, forceRedraw);
    }

    // restoreViewState

    public async Task RevealLine(int lineNumber, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealLine", Id, lineNumber, scrollType);
    }

    public async Task RevealLineInCenter(int lineNumber, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealLineInCenter", Id, lineNumber, scrollType);
    }

    public async Task RevealLineInCenterIfOutsideViewport(int lineNumber, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealLineInCenterIfOutsideViewport", Id, lineNumber, scrollType);
    }

    public async Task RevealLines(int startLineNumber, int endLineNumber, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealLines", Id, startLineNumber, endLineNumber, scrollType);
    }

    public async Task RevealLinesInCenter(int startLineNumber, int endLineNumber, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealLinesInCenter", Id, startLineNumber, endLineNumber, scrollType);
    }

    public async Task RevealLinesInCenterIfOutsideViewport(int startLineNumber, int endLineNumber, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealLinesInCenterIfOutsideViewport", Id, startLineNumber, endLineNumber, scrollType);
    }

    public async Task RevealPosition(Position position, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealPosition", Id, position, scrollType);
    }

    public async Task RevealPositionInCenter(Position position, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealPositionInCenter", Id, position, scrollType);
    }

    public async Task RevealPositionInCenterIfOutsideViewport(Position position, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealPositionInCenterIfOutsideViewport", Id, position, scrollType);
    }

    public async Task RevealRange(Range range, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealRange", Id, range, scrollType);
    }

    public async Task RevealRangeAtTop(Range range, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealRangeAtTop", Id, range, scrollType);
    }

    public async Task RevealRangeInCenter(Range range, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealRangeInCenter", Id, range, scrollType);
    }

    public async Task RevealRangeInCenterIfOutsideViewport(Range range, ScrollType? scrollType = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.revealRangeInCenterIfOutsideViewport", Id, range, scrollType);
    }

    // saveViewState

    private async Task SetEventListener(string eventName)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setEventListener", Id, eventName, jsObjectRef);
    }

    public async Task SetModel(TextModel model)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setInstanceModel", Id, model.Uri);
    }

    public async Task SetPosition(Position position)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setPosition", Id, position);
    }

    public async Task SetScrollLeft(int newScrollLeft)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setScrollLeft", Id, newScrollLeft);
    }

    public async Task SetScrollPosition(int newScrollLeft, int newScrollTop)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setScrollPosition", Id, newScrollLeft, newScrollTop);
    }

    public async Task SetScrollTop(int newScrollTop)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setScrollTop", Id, newScrollTop);
    }

    public async Task SetSelection(Range selection)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setSelection", Id, selection);
    }

    public async Task SetSelection(Selection selection)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setSelection", Id, selection);
    }

    public async Task SetSelections(List<Selection> selections)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setSelections", Id, selections);
    }

    public async Task SetValue(string newValue)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setValue", Id, newValue);
    }

    public async Task Trigger(string source, string handlerId, JsonElement payload)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.trigger", Id, source, handlerId, payload);
    }

    public async Task UpdateOptions(GlobalEditorOptions options)
    {
        // Convert the options object into a dictionary to get rid of the properties with null values
        var optionsJson = JsonSerializer.Serialize(options, new JsonSerializerOptions
        {
            IgnoreNullValues = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
        var optionsDict = JsonSerializer.Deserialize<JsonElement>(optionsJson);
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.updateOptions", Id, optionsDict);
    }

    // decorations

    public async Task SetDeltaDecoration(Range range, object options = null)
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setDeltaDecoration", Id, range, options);
    }

    public async Task ResetDeltaDecorations()
    {
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.resetDeltaDecorations", Id);
    }

    #endregion

}
