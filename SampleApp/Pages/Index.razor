@page "/"
@using OmniSharp.Models
@using OmniSharp.Models.Diagnostics
@using OmniSharp.Models.SignatureHelp
@using OmniSharp.Models.v1.Completion
@using BlazorMonaco.Bridge
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.Text
@using LinePositionSpan = BlazorMonaco.Bridge.LinePositionSpan

<h3>Code Editor</h3>

<div>
    <div style="margin:10px 0;">
        Theme:
        <select @onchange="ChangeTheme">
            <option value="vs">Visual Studio</option>
            <option value="vs-dark">Visual Studio Dark</option>
            <option value="hc-black">High Contrast Black</option>
        </select>
    </div>
    <div style="margin:10px 0;">
        New Value: <input type="text" @bind="ValueToSet" style="width: 400px;" /> <button @onclick="SetValue">Set Value</button>
    </div>
    <div style="margin:10px 0;">
        <button @onclick="GetValue">Get Value</button>
    </div>
    <div style="margin:10px 0;">
        <button @onclick="AddCommand">Add Command (Ctrl+Enter)</button>
    </div>
    <div style="margin:10px 0;">
        <button @onclick="AddAction">Add Action (Ctrl+D)</button>
    </div>
    <div style="margin:10px 0;">
        See the console for results.
    </div>
</div>

<MonacoEditor @ref="_editor" Id="sample-code-editor-123" 
              ConstructionOptions="EditorConstructionOptions" 
              OnDidInit="EditorOnDidInit" 
              OnContextMenu="OnContextMenu" 

              OnHoverRequest="OnHoverCallback" HoverResponse="_hoverInfoResponse" 
              OnDiagnosticsRequest="OnDiagnosticsCallback" DiagnosticsResponse="_diagnosticsResponse"
              OnSignatureHelpRequest="OnSignatureCallback" SignatureHelpResponse="_signatureHelpResponse"
              OnCompletionRequest="OnCompletionCallback" CompletionResponse="_completionResponse"
              OnCompletionResolveRequest="OnCompletionResolveCallback" CompletionResolveResponse="_completionResolveResponse"
              />

@code {
    private MonacoEditor _editor { get; set; }
    private QuickInfoResponse _hoverInfoResponse = new();
    private DiagnosticResponse _diagnosticsResponse = new();
    private SignatureHelpResponse _signatureHelpResponse = new();
    private CompletionResponse _completionResponse = new();
    private CompletionResolveResponse _completionResolveResponse = new();
    private string ValueToSet { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "csharp",
            GlyphMargin = true,
            Value = "using System;\n" +
                    "var name = string.Empty;\n" +
                    "Console.WriteLine(name);\n"
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.KeyH, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private string[] decorationIds;

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value.ToString()}");
        await MonacoEditor.SetTheme(e.Value.ToString());
    }

    private async Task SetValue()
    {
        Console.WriteLine($"setting value to: {ValueToSet}");
        await _editor.SetValue(ValueToSet);
    }

    private async Task GetValue()
    {
        var val = await _editor.GetValue();
        Console.WriteLine($"value is: {val}");
    }

    private async Task AddCommand()
    {
        await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.Enter, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
        });
    }

    private async Task AddAction()
    {
        await _editor.AddAction("testAction", "Test Action", new int[] { (int)KeyMode.CtrlCmd | (int)KeyCode.KeyD, (int)KeyMode.CtrlCmd | (int)KeyCode.KeyB }, null, null, "navigation", 1.5, (editor, keyCodes) =>
        {
            Console.WriteLine("Ctrl+D : Editor action is triggered.");
        });
    }

    private async Task OnHoverCallback(QuickInfoRequest obj)
    {
        _hoverInfoResponse = new QuickInfoResponse()
        {
            Markdown = "Hello world"
        };
        await Task.CompletedTask;
    }

    private async Task OnDiagnosticsCallback(DiagnosticsRequest obj)
    {
        _diagnosticsResponse = new DiagnosticResponse()
        {
            Diagnostics = new List<DiagnosticModel>()
            {
                new DiagnosticModel()
                {
                    Severity = DiagnosticSeverity.Error.GetSeverity(),
                    LinePositionSpan = new LinePositionSpan(new LinePosition(1, 1), new LinePosition(1, 7)),
                    Message = "Diagnostic example..."
                }
            }
        };
        await Task.CompletedTask;
    }

    private async Task OnSignatureCallback(SignatureHelpRequest obj)
    {
        new SignatureHelpResponse()
        {
            ActiveSignature = 1,
            ActiveParameter = 1,
            Signatures = new List<SignatureHelpItem>()
            {
                new SignatureHelpItem(){
                Name = "Fake0", 
                Documentation = "This is fake method signature #0", 
                Label = "Method",
                Parameters = new List<SignatureHelpParameter>()
                {
                    new SignatureHelpParameter(){Name = "Parameter0", Documentation = "This is parameter 0", Label = "string"},
                    new SignatureHelpParameter(){Name = "Parameter1", Documentation = "This is parameter 1", Label = "string"}
                }
            },
                new SignatureHelpItem(){
                    Name = "Fake1", 
                    Documentation = "This is fake method signature #1", 
                    Label = "Method",
                    Parameters = new List<SignatureHelpParameter>()
                    {
                        new SignatureHelpParameter(){Name = "Parameter0", Documentation = "This is parameter 0", Label = "string"},
                        new SignatureHelpParameter(){Name = "Parameter1", Documentation = "This is parameter 1", Label = "string"}
                    }
                }
            }
        };
        await Task.CompletedTask;
    }

    private async Task OnCompletionCallback(CompletionRequest obj)
    {
        _completionResponse = new CompletionResponse()
        {
            IsIncomplete = true,
            Items = new List<CompletionItem>()
            {
                new CompletionItem(){Label = "CompletionItem1", Documentation = "Documentation about item", Kind = CompletionItemKind.Function},
                new CompletionItem(){Label = "CompletionItem2", Documentation = "Documentation about item", Kind = CompletionItemKind.Function}
            }
        };
        await Task.CompletedTask;
    }

    private async Task OnCompletionResolveCallback(CompletionResolveRequest obj)
    {
       _completionResolveResponse = new CompletionResolveResponse()
        {
            Item = new CompletionItem() { Label = "CompletionItemHover", Documentation = "More detail about completion item..." }
        };
        await Task.CompletedTask;
    }

}
